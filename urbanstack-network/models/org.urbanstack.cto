namespace org.urbanstack

enum TransitMode {
  o   Walking
  o   TNC
  o   Auto
  o   Bus
  o   Metro
  o   Private
  o   BikeShare
}

enum TripStatus{
  o CREATED
  o CONFIRMED
  o STARTED
  o ENDED
  o BOARDEDBUS
}

enum Ownership {
  o LEASED
  o OWNED
}

enum PaymentPreference {
  o START
  o END
}
concept KeyValue {
  o String    vPassengerId
  --> TripLeg tripLeg
}

concept Place {
  o String    address
  o Double    lat optional
  o Double    lng optional
  o String    PlaceId optional
  o String[]  incomingPassengerKeys optional
  o String[]  outgoingPassengerKeys optional
}

concept City {
  o String name
  o Double lat optional
  o Double lng optional
  o String[] incomingPassengerKeys optional
  o String[] outgoingPassengerKeys optional
}

concept Contact {
  o String fName
  o String lname
  o String email
}

concept Route {
  o   Place           start_location
  o   Place           end_location
  o   DateTime        start_time optional
  o   DateTime        end_time optional
  o   Double          duration
  o   Double          distance
  o   TripStatus      status default = "CREATED"
  o   Double          fare optional
}
abstract participant User identified by participantKey {
  o String          participantKey
  o Contact         contact
}

participant Operator extends User {
}

participant CityPlanner extends User {
}

participant Passenger extends User {
  --> vPassenger[] vPassengers optional
  o Double balance
}

participant TransitProvider extends User {
  o Double balance
  o TransitMode       transitMode
  o PaymentPreference paymentPreference
  o Double farePerKm
  --> TripLeg[]       tentativeTripLegs optional
  --> TripLeg[]       confirmedTripLegs optional
  --> TripLeg[]       completedTripLegs optional
  --> MobilityAsset[] mobilityassets optional
}

asset TripLeg identified by tripLegId{
  o   String          tripLegId
  o   Route           route
  o   String[]        MIds optional
  o   TransitMode     transitMode default = "Bus"
  --> TransitProvider transitProvider
}

asset vPassenger identified by vPassengerId {
  o   Route     route
  o   String    vPassengerId
  --> Passenger passenger
  --> TripLeg[]  tentativeTripLegs 
  --> TripLeg[]  confirmedTripLegs optional
  --> TripLeg[]  completedTripLegs optional
  --> TripLeg   currentTripLeg optional
}

asset MobilityAsset identified by MiD {
  o String MiD
  o String name
  --> TransitProvider owner
  --> Operator operator optional
}

transaction CreateTrip  {
  o Route             overallRoute
  o TripLeg[]         tentativeTripLegs
  --> Passenger       passenger
}

transaction ConfirmTripLeg  {
  o DateTime          start_time
  --> Passenger       Passenger
  --> TripLeg         tripLeg
  --> vPassenger      vPassenger
}

transaction BusScan {
  o String            MiD
  o Place             currentLocation
  --> vPassenger      vPassenger
  --> TransitProvider transitProvider
}

transaction StartTrip{
  o String            MiD
  o Place             currentLocation
  --> vPassenger      vPassenger
  --> TransitProvider transitProvider
}

transaction EndTrip{
  o String            MiD
  o Place             currentLocation
  --> vPassenger      vPassenger
  --> TransitProvider transitProvider
}

event TripCreated {
  o String  vPassengerId
}

event TripLegConfirmed {
  o String  tripLegId
  o String  vPassengerId
}

event TripStarted {
  o String  MiD
  o String  tripLegId
  o String  vPassengerId
}

event TripEnded {
  o String  MiD
  o String  tripLegId
  o String  vPassengerId
}
event QRScannedOnBus {
  o String  MiD
  o String  tripLegId
  o String  vPassengerId
}

event CreateNewTripLeg {
  o String  MiD
  o String  vPassengerId
}