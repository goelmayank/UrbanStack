namespace org.urbanstack

enum TransitMode {
  o   Walking
  o   TNC
  o   Auto
  o   Bus
  o   Metro
  o   Private
  o   BikeShare
}

enum TripLegStatus{
  o BOOKED
  o CONFIRMED
  o STARTED
  o ENDED
}

enum Ownership {
  o   LEASED
  o   OWNED
}

concept KeyValue {
  o String vPassengerId
  --> TripLeg tripLeg
}

concept Place {
  o String address
  o Double lat optional
  o Double lng optional
  o String PlaceId optional
  o String[] incomingPassengerKeys optional
  o String[] outgoingPassengerKeys optional
}

concept City {
  o String name
  o Double lat optional
  o Double lng optional
  o String[] incomingPassengerKeys optional
  o String[] outgoingPassengerKeys optional
}

concept Contact {
  o String fName
  o String lname
  o String email
}

abstract participant User identified by participantKey {
  o String          participantKey
  o Contact         contact
}

participant Operator extends User {
}

participant CityPlanner extends User {
}

participant Passenger extends User {
  --> vPassenger[] trips
  o Double balance
}

participant TransitProvider extends User {
  --> MobilityAsset[] mobilityassets optional
  o Double balance
  o String[]  tentativeTripLegs
  o String[]  completedTripLegs 
  o TransitMode transitMode
  o City city
}

asset TripLeg identified by TripLegId{
  o   String  TripLegId
  o   TransitMode  transitMode
  o   Place  leg_origin
  o   Place  leg_destination
  o   DateTime  start_time optional
  o   DateTime  end_time optional
  o   Double  duration
  o   Double  distance
  o   TripLegStatus status
  o   Double    fare
  o   String  MiD optional
  --> TransitProvider transitProvider optional
}

asset vPassenger identified by vPassengerId {
  o   String  vPassengerId
  o   String  CurrentTripLegId
  o   String[] tentativeTripLegIds
  o   String[] completedTripLegIds optional
  --> Passenger owner
}

asset MobilityAsset identified by MiD {
  o String MiD
  o String name
  --> TransitProvider owner
  --> Operator operator optional
}

transaction CreateTrip  {
  o TripLeg[]   tentativeTripLegs
  o String      passengerKey
}

transaction ConfirmTripLeg  {
  o DateTime    start_time
  o TripLeg[]   tentativeTripLegs
  o String      passengerKey
}

transaction BusScan {
  o String    vPassengerId
  o String    transitProviderKey
  o String    MiD
}

transaction StartTrip{
  --> vPassenger vPassenger
  --> MobilityAsset mobilityAsset
}

transaction EndTrip{
  --> vPassenger vPassenger
  --> MobilityAsset mobilityAsset
}

event TripCreated {
  o String      vPassengerId
}

event TripLegConfirmed {
  o String      vPassengerId
  o String      tripLegId
}

event TripStarted {
  o String      vPassengerId
}

event TripCompleted {
  o String      vPassengerId
  o String      tripLegId
}
event QRScannedOnBus {
  o String   vPassengerId
  o String   MiD
  o Place    origin
  o Place    destination
}

event CreateNewTripLeg {
  o String      vPassengerId
}